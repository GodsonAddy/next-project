import Image from "next/image";
import React, { useState } from "react";
import PropTypes from "prop-types";
import {
  AppBar,
  Box,
  Divider,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Toolbar,
  Button,
  Grid,
  Typography,
  Link,
  Container,
  Avatar,
  Menu,
  MenuItem,
  ListItemIcon,
  Badge,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import logo from "../public/assets/bloop-logo.png";
import { navItems } from "../utils/NavBar.utils";
import { useRouter } from "next/router";
import { signOut, useSession } from "next-auth/react";
import Logout from "@mui/icons-material/Logout";
import { signIn } from "next-auth/react";
import Head from "next/head";
import { getSession } from "next-auth/react";
import FormControl from "@mui/joy/FormControl";
import FormLabel from "@mui/joy/FormLabel";
import FormHelperText from "@mui/joy/FormHelperText";
import Radio from "@mui/joy/Radio";
import RadioGroup from "@mui/joy/RadioGroup";

export async function getServerSideProps({ req }) {
  const session = await getSession({ req });

  // if (!session) {
  //   return {
  //     redirect: {
  //       destination: "/",
  //       permanent: false,
  //     },
  //   };
  // }

  return {
    props: { session },
  };
}

const drawerWidth = 240;
export default function Home(props) {
  const { window } = props;
  const [mobileOpen, setMobileOpen] = useState(false);
  const [anchorElUser, setAnchorElUser] = useState(null);
  const { data: session } = useSession();
  const router = useRouter();
  console.log("session", session?.user);
  // const handleOpenUserMenu = (event) => {
  //   setAnchorElUser(event.currentTarget);
  // };

  const handleCloseUserMenu = () => {
    setAnchorElUser(null);
  };

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const drawer = (
    <Box
      onClick={handleDrawerToggle}
      sx={{
        textAlign: "center",
      }}
    >
      <List>
        {navItems.map(({ id, name, url, icon }) => (
          <ListItem
            key={id}
            disablePadding
            sx={{ fontFamily: "League Spartan" }}
          >
            <ListItemButton
              sx={{ textAlign: "center" }}
              onClick={() => router.push(url)}
            >
              <ListItemText>
                <Grid
                  container
                  dispaly="flex"
                  justifyContent="center"
                  alignItems="center"
                >
                  <Grid item>
                    <Typography sx={{ fontWeight: 600 }}>{name}</Typography>
                  </Grid>
                  <Grid item>
                    <Typography>
                      <sub>{icon}</sub>
                    </Typography>
                  </Grid>
                </Grid>
              </ListItemText>
            </ListItemButton>
          </ListItem>
        ))}
      </List>
    </Box>
  );

  const container =
    window !== undefined ? () => window().document.body : undefined;

  return (
    <Box>
      <Container>
        <Head>
          <title>Home page</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AppBar
          component="nav"
          sx={{
            color: "tertiary.main",
            backgroundColor: "secondary.main",
            boxShadow: "none",
          }}
          position="static"
        >
          <Toolbar id="back-to-top-anchor" variant="regular">
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              onClick={handleDrawerToggle}
              sx={{
                flexGrow: 1,

                justifyContent: "flex-start",
                display: {
                  xs: "flex",
                  sm: "flex",
                  md: "flex",
                  lg: "none",
                  xl: "none",
                },
              }}
            >
              <MenuIcon />
            </IconButton>

            <Box
              sx={{
                flexGrow: 1,
                ml: -2,
                display: {
                  xs: "none",
                  sm: "none",
                  md: "none",
                  lg: "block",
                  xl: "block",
                },
              }}
            >
              {navItems.map(({ id, name, url, icon }) => (
                <Button key={id} href={url} color="tertiary">
                  <Grid
                    container
                    key={id}
                    dispaly="flex"
                    justifyContent="center"
                    alignItems="center"
                  >
                    <Grid item>
                      <Badge
                        color="primary"
                        variant="dot"
                        invisible={router.pathname !== url}
                      >
                        <Typography sx={{ fontWeight: 600 }}>{name}</Typography>
                      </Badge>
                    </Grid>

                    <Grid item>
                      <Typography>
                        <sub>{icon}</sub>
                      </Typography>
                    </Grid>
                  </Grid>
                </Button>
              ))}
            </Box>

            {/* Login + user's profile */}
            <Box>
              <Box>
                {session ? (
                  <Button
                    variant="outlined"
                    sx={{
                      color: "primary.main",
                      fontWeight: 600,
                      "&:hover": {
                        color: "secondary.main",
                        backgroundColor: "primary.main",
                      },
                    }}
                    onClick={() => signOut()}
                  >
                    signout
                  </Button>
                ) : (
                  <Button
                    variant="outlined"
                    sx={{
                      color: "primary.main",
                      fontWeight: 600,
                      "&:hover": {
                        color: "secondary.main",
                        backgroundColor: "primary.main",
                      },
                    }}
                    onClick={() => signIn("/login")}
                  >
                    Login
                  </Button>
                )}
              </Box>
            </Box>
          </Toolbar>
        </AppBar>
        <Divider sx={{ backgroundColor: "tertiary.main" }} />
        <Box component="nav">
          <Drawer
            container={container}
            variant="temporary"
            open={mobileOpen}
            onClose={handleDrawerToggle}
            ModalProps={{
              keepMounted: true, // Better open performance on mobile.
            }}
            sx={{
              display: {
                xs: "block",
                sm: "block",
                md: "block",
                lg: "none",
                xl: "none",
              },
              "& .MuiDrawer-paper": {
                boxSizing: "border-box",
                width: drawerWidth,
                backgroundColor: "#28282B",
                color: "secondary.main",
              },
            }}
          >
            {drawer}
          </Drawer>
        </Box>
        <Box>
          <Typography>{session && session?.user?.name}</Typography>
          <Typography>{session && session?.user?.email}</Typography>
        </Box>
        <div>
          <FormControl>
            <FormLabel>Gender</FormLabel>
            <RadioGroup
              defaultValue="female"
              name="radio-buttons-group"
              sx={{ my: 1 }}
            >
              <Radio value="female" label="Female" />
              <Radio value="male" label="Male" />
              <Radio value="other" label="Other" />
            </RadioGroup>
            <FormHelperText>This is a helper text.</FormHelperText>
          </FormControl>
        </div>
      </Container>
    </Box>
  );
}

Home.propTypes = {
  window: PropTypes.func,
};
